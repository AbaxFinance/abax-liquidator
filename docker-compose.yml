version: '3.9'

services:
  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: 'rabbitmq:3.11.9-management-alpine'
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - ./compose-persistence/rabbit/data/:/var/lib/rabbitmq
    networks:
      - local_bridge
  postgres:
    container_name: postgres_container
    hostname: postgres_container
    image: postgres:16.1
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /data/postgres
    volumes:
      - ./compose-persistence/postgres:/data/postgres
      - ./db/pg_hba.conf:/var/lib/postgresql/pg_hba.conf
    command: postgres -c 'hba_file=/var/lib/postgresql/pg_hba.conf'
    ports:
      - '5432:5432'
    networks:
      - local_bridge
    restart: unless-stopped
  postgres-bp:
    container_name: postgres-bp_container
    hostname: postgres-bp_container
    build:
      context: './db/backup'
      dockerfile: Dockerfile
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - ./db/backup/backups:/backups
      - ./db/backup/pg_backup.config:/work/pg_backup.config
    networks:
      - local_bridge
    restart: unless-stopped
  pgadmin:
    container_name: pgadmin_container
    hostname: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - '${PGADMIN_PORT:-5050}:80'
    networks:
      - local_bridge
    restart: unless-stopped
    depends_on:
      - postgres
  logrotator:
    container_name: logrotator
    hostname: logrotator
    image: blacklabelops/logrotate
    environment:
      LOGS_DIRECTORIES: '/workdir/logs'
      LOGROTATE_INTERVAL: 'hourly'
      LOGROTATE_SIZE: '10M'
      # LOGROTATE_COMPRESSION: 'compress'
      # LOGROTATE_INTERVAL: "daily"
      LOGROTATE_LOGFILE: /workdir/logs/logrotatecron.log
    volumes:
      - './compose-persistence/logs:/workdir/logs'

  price-updater:
    build:
      context: '../'
      dockerfile: abax-liquidator/actor.node.Dockerfile
    image: 'liquidation-node-actor'
    container_name: 'price-updater'
    hostname: 'price-updater'
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    environment:
      ACTOR_TO_RUN: PRICE_UPDATER
    volumes:
      - './compose-persistence/logs:/app/logs'
    env_file:
      - '.env.local.docker'
      - '.env.secret'
    networks:
      - local_bridge
  reservedata-chain-updater:
    build:
      context: '../'
      dockerfile: abax-liquidator/actor.node.Dockerfile
    image: 'liquidation-node-actor'
    container_name: 'reservedata-chain-updater'
    hostname: 'reservedata-chain-updater'
    restart: always
    depends_on:
      - postgres
    environment:
      ACTOR_TO_RUN: RESERVE_DATA_CHAIN_UPDATER
    volumes:
      - './compose-persistence/logs:/app/logs'
    env_file:
      - '.env.local.docker'
      - '.env.secret'
    networks:
      - local_bridge
    ports:
      - 9229:9229
  userdata-chain-updater:
    build:
      context: '../'
      dockerfile: abax-liquidator/actor.node.Dockerfile
    image: 'liquidation-node-actor'
    container_name: 'userdata-chain-updater'
    hostname: 'userdata-chain-updater'
    restart: always
    depends_on:
      - postgres
    environment:
      ACTOR_TO_RUN: USER_DATA_CHAIN_UPDATER
    volumes:
      - './compose-persistence/logs:/app/logs'
    env_file:
      - '.env.local.docker'
      - '.env.secret'
    networks:
      - local_bridge
  eventanalysis-ensurer:
    build:
      context: '../'
      dockerfile: abax-liquidator/actor.node.Dockerfile
    image: 'liquidation-node-actor'
    container_name: 'eventanalysis-ensurer'
    hostname: 'eventanalysis-ensurer'
    restart: always
    depends_on:
      - postgres
    environment:
      ACTOR_TO_RUN: EVENT_ANALYZE_ENSURER
    volumes:
      - './compose-persistence/logs:/app/logs'
    env_file:
      - '.env.local.docker'
      - '.env.secret'
    networks:
      - local_bridge
  event-listener:
    build:
      context: '../'
      dockerfile: abax-liquidator/actor.node.Dockerfile
    image: 'liquidation-node-actor'
    container_name: 'event-listener'
    hostname: 'event-listener'
    restart: always
    depends_on:
      - postgres
    environment:
      ACTOR_TO_RUN: EVENT_LISTENER
    volumes:
      - './compose-persistence/logs:/app/logs'
    env_file:
      - '.env.local.docker'
      - '.env.secret'
    networks:
      - local_bridge
  periodic-hf-updater:
    build:
      context: '../'
      dockerfile: abax-liquidator/actor.node.Dockerfile
    image: 'liquidation-node-actor'
    container_name: 'periodic-hf-updater'
    hostname: 'periodic-hf-updater'
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    environment:
      ACTOR_TO_RUN: PERIODIC_HFUPDATER
      AMQP_URL: amqp://rabbitmq
      LOG_LEVEL: DEBUG
    volumes:
      - './compose-persistence/logs:/app/logs'
    env_file:
      - '.env.local.docker'
      - '.env.secret'
    networks:
      - local_bridge
  price-change-updater:
    build:
      context: '../'
      dockerfile: abax-liquidator/actor.node.Dockerfile
    image: 'liquidation-node-actor'
    container_name: 'price-change-updater'
    hostname: 'price-change-updater'
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    environment:
      ACTOR_TO_RUN: PRICE_CHANGE_HFUPDATER
    volumes:
      - './compose-persistence/logs:/app/logs'
    env_file:
      - '.env.local.docker'
      - '.env.secret'
    networks:
      - local_bridge
  liquidator:
    build:
      context: '../'
      dockerfile: abax-liquidator/actor.node.Dockerfile
    image: 'liquidation-node-actor'
    container_name: 'liquidator'
    hostname: 'liquidator'
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    environment:
      ACTOR_TO_RUN: LIQUIDATOR
    volumes:
      - './compose-persistence/logs:/app/logs'
    env_file:
      - '.env.local.docker'
      - '.env.secret'
    networks:
      - local_bridge

networks:
  local_bridge:
    driver: bridge
volumes:
  pgadmin:
